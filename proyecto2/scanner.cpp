#line 1 "scanner.cpp"

#line 3 "scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[349] =
    {   0,
        0,    0,   89,   87,   84,   86,   85,   36,   87,   87,
       87,    6,    7,   18,   16,   14,   17,   13,   19,    1,
       12,   15,   22,   23,   21,   37,   87,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   10,   11,   20,    8,   87,
        9,   33,    0,    5,   35,    0,    0,    0,   27,   24,
       26,   25,   28,   29,    0,    1,   31,   32,   30,    0,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       62,   83,   83,   83,   34,    3,    2,    0,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,    0,   83,   83,
       83,   83,   66,   83,   78,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   48,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   59,   83,   83,   70,
       75,   83,   83,   83,   83,   83,   83,   64,   83,   83,
       83,    0,   83,   83,   83,   83,   47,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,    4,   69,   83,
       83,   83,   83,   83,   71,   83,   83,   58,   83,   83,
       83,   83,   83,   83,   83,    0,   83,   52,   83,    0,
       76,   83,   74,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   39,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,    0,   83,
       83,    0,   83,   83,   83,   83,   83,   41,   67,   83,
       83,   60,   79,   83,   83,   83,   83,   83,   83,   83,
       73,   83,   50,   83,   49,   83,   83,   63,   44,   83,
        0,   38,   40,   83,   83,   83,   83,   83,   83,   55,

       42,   72,   83,   68,   83,   83,   83,   54,   83,   83,
        0,   83,   61,   83,   77,   83,   53,   83,   83,   57,
       51,   83,    4,    0,   43,   83,   80,   83,   81,   65,
        0,   83,   83,   83,    0,   83,   83,   82,   56,   83,
       83,   83,   83,   83,   83,   45,   46,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    1,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   34,   35,   36,   37,   38,   39,
       34,   40,   41,   42,   43,   44,   34,   34,   34,   34,
       45,   46,   47,   48,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   34,   34,   59,   60,   61,
       62,   63,   34,   64,   65,   66,   67,   68,   34,   34,
       34,   34,   69,   70,   71,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   34,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   34,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   34,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1,    3,    1,    1,    4,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[353] =
    {   0,
        0,    0,  249, 1299, 1299, 1299, 1299,  226,  236,  209,
       55, 1299, 1299,  192,   61, 1299,   60, 1299,  174,   60,
     1299, 1299,  130,  127,  125, 1299,   35,   63,   61,   68,
       62,   72,   70,   66,  107,  105,  114,  122,  127,  132,
      142,  161,  169,  162,  172, 1299, 1299, 1299, 1299,   37,
     1299, 1299,   92, 1299, 1299,   80,   88,  118, 1299, 1299,
     1299, 1299, 1299, 1299,   77,   69, 1299, 1299, 1299,   52,
       91,  156,  179,  171,  186,  176,  190,  212,  215,  216,
      217,  228,  243,  236,  250,  256,  255,  258,  262,  269,
      267,  272,  280,  284,  296,  289,  313,  305,  293,  320,

      324,  327,  340,  300, 1299, 1299,   75,   99,  187,  335,
      348,  353,  341,  357,  355,  361,  381,  382,  383,  392,
      399,  365,  405,  407,  409,  422,  426,  428,  435,  445,
      421,  456,  455,  461,  452,  474,  481,  483,  478,  495,
      499,  464,  518,  502,  524,  519,  501,   89,  538,  536,
      545,  549,  191,  542,  202,  558,  564,  563,  567,  562,
      561,  508,  569,  585,  588,  298,  587,  592,  598,  606,
      625,  614,  364,  618,  622,  633,  418,  623,  616,  465,
      507,  642,  659,  658,  662,  640,  669,  688,  664,  681,
      685,  145,  682,  689,  683,  699,  700,  709,  707,  710,

      711,  728,  738,  736,  735,  755,  752,  737,  749,  766,
      761,  759,  764,  775,  750,  762,  795,  776,  780,  790,
      804,  805,  811,  818,  816,   97,  823,  801,  834,  104,
      820,  829,  825,  835,  842,  856,  853,  858,  859,  863,
      865,  860,  871,  869,  877,  908,  896,  911,  913,  914,
      926,  929,  931,  927,  923,  930,  924,  938,  295,  960,
      966,  688,  965,  967,  968,  974,  985,  889,  983,  987,
      991,  984,  989,  993, 1008, 1011, 1013, 1018, 1022, 1027,
     1024, 1030, 1035, 1037, 1042, 1049, 1044, 1299, 1047, 1052,
      216, 1051, 1061, 1077, 1068, 1071, 1082, 1080, 1090, 1066,

     1087, 1092, 1107, 1101, 1106, 1108, 1111, 1104, 1121, 1116,
      724, 1123, 1120, 1151, 1128, 1131, 1130, 1158, 1157, 1135,
     1144, 1164, 1145,  859, 1147, 1175, 1169, 1181, 1171, 1173,
      901, 1186, 1182, 1188,  337, 1195, 1198, 1200, 1299, 1204,
     1222, 1208, 1221, 1229, 1224, 1211, 1225, 1299, 1286, 1289,
     1291, 1294
    } ;

static const flex_int16_t yy_def[353] =
    {   0,
      348,    1,  348,  348,  348,  348,  348,  348,  349,  348,
      350,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  348,  348,  348,  348,  348,
      348,  348,  349,  348,  348,  348,  350,  350,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      352,  351,  351,  352,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,

      351,  351,  351,  351,  348,  348,  348,  348,  352,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  348,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  348,  351,  351,  351,  351,  351,  351,  351,  351,

      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  352,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  348,  351,  351,  351,  348,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  352,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  348,  351,
      351,  348,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  352,  351,  351,  351,  352,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  348,  351,  351,
      348,  351,  351,  351,  351,  351,  351,  351,  352,  351,

      351,  351,  352,  351,  351,  351,  351,  351,  351,  351,
      348,  351,  351,  351,  351,  351,  352,  352,  351,  351,
      351,  351,  351,  348,  351,  351,  351,  352,  351,  351,
      348,  351,  351,  352,  348,  351,  351,  352,  348,  351,
      351,  351,  351,  351,  351,  351,  351,    0,  348,  348,
      348,  348
    } ;

static const flex_int16_t yy_nxt[1371] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   34,   37,   38,   39,   40,   41,   42,
       43,   44,   34,   45,   46,    4,   47,   48,    4,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   34,   45,   49,   50,
       51,   56,   60,   62,   65,   70,   66,   71,   71,   71,
       63,   61,   71,   65,   71,   66,   71,  106,   71,  108,
       80,  107,   77,  107,   83,  106,   56,   54,   75,   70,

       58,   73,   78,   76,  348,   79,  105,   71,   81,   74,
       74,   74,   82,  108,   74,   80,   74,   77,   74,   83,
       74,   71,   75,   71,  148,   73,   78,   76,  192,   79,
       71,   84,   81,  348,   56,   85,   82,  259,   71,   74,
       86,   87,   88,   71,  262,   69,   89,   68,   71,  148,
       67,   92,  192,   74,   90,   74,   84,   94,   71,   91,
       85,  259,   74,  348,   86,   87,   95,   88,  262,   93,
       74,   89,   71,  230,   96,   74,   92,   71,   71,   90,
       74,   97,   94,   91,   98,   71,  102,   71,   71,   99,
       74,   95,   71,   93,   64,   71,  103,  100,  230,   96,

      104,  101,   71,   71,   74,   97,   71,   71,   98,   74,
       74,  102,   59,  110,   99,   55,  112,   74,   71,   74,
       74,  103,  100,  111,   74,  104,  101,   74,   71,  113,
      114,   71,   71,   71,   74,   74,  115,  110,   74,   74,
      112,   54,  118,  122,   71,  119,   52,  111,  348,  116,
       74,  117,   71,  113,  114,  311,  120,  121,  123,   71,
       74,  115,  126,   74,   74,   74,   71,  118,  122,  124,
      119,   71,   71,  116,   71,  117,   74,  125,   71,  311,
      120,  121,  123,   71,   74,   71,  130,  126,   71,  127,
      348,   74,  348,  124,  128,  129,   71,  132,   74,  134,

       71,  125,  131,   74,   74,   71,   74,  133,  135,   71,
       74,  130,   71,  127,   71,   74,   71,   74,  128,  129,
       74,   71,  132,  138,  134,  136,  131,  288,   74,   71,
      141,  133,   74,  135,  142,  137,   71,   74,  348,  147,
       71,   74,  348,   71,   74,  139,   74,  138,   74,  136,
      140,   71,  288,   74,  143,  141,   71,   71,  142,  137,
      144,   74,  145,  147,   71,  152,  146,  149,   74,   71,
      139,   71,   74,   71,  140,   74,  339,   71,  143,  151,
       71,   71,  150,   74,  144,  155,  145,  348,   74,   74,
      152,  146,  149,  348,  153,  154,   74,   71,   71,   71,

      339,   74,  164,   74,  151,   74,  150,  156,   71,   74,
      155,  160,  214,   74,  159,   71,  161,  348,  153,  154,
      162,   71,  157,   71,  158,   71,  164,  163,  348,   74,
       74,   74,  156,  165,   71,  166,  160,   71,   71,  159,
       74,  161,   71,  348,   71,  162,  157,   74,  158,  167,
      168,   71,  163,   74,  169,   74,  348,   74,  165,  348,
      166,   71,  174,  172,  348,  170,   74,  171,   71,   74,
       74,   71,   71,  167,   74,  168,   74,   71,  348,  169,
       71,   71,  348,   74,  173,  177,  174,  348,  172,  170,
       71,  171,  175,   74,   71,  178,  176,   71,  348,   71,

       74,  186,  179,   74,   74,  180,  348,  181,  173,   74,
      177,   71,   74,   74,  182,   71,  175,   71,   71,  178,
      176,  183,   74,   71,   71,  186,   74,  179,  191,   74,
      180,   74,  181,  185,   71,   71,  184,  348,  182,  188,
       71,  348,  348,   74,  204,  183,  187,   74,  189,   74,
       74,  190,   71,  191,   71,   74,   74,  185,   71,  348,
      184,   71,  193,  188,  194,   71,   74,   74,  204,  195,
      197,  187,   74,  189,   71,  196,  190,   71,   71,   71,
       71,  348,  198,   71,   74,   71,   74,  193,  202,  194,
       74,  200,  348,   74,  195,  197,  199,   74,  348,  203,

      196,   71,  201,   71,   71,  205,   74,  198,   71,   74,
       74,   74,   74,  202,   71,   74,  200,   74,  348,  206,
      348,  199,   71,  203,  208,  210,  201,  207,  348,  205,
       71,  209,   71,   74,   71,   74,   74,  348,   71,   71,
       74,   71,  215,  206,  348,  211,   74,  348,  208,   71,
      210,  207,  219,  213,   74,  209,   71,  212,   71,  348,
      218,  348,   74,  216,   74,  348,   74,  215,  220,  211,
       74,   74,  217,   74,   71,   71,  219,  213,   71,  224,
       71,   74,  212,  221,  218,   71,  222,  216,   74,  226,
       74,  226,  348,  220,  223,  225,  217,   71,   71,   71,

      227,   71,  348,  224,   71,   71,   74,   74,  221,  229,
       74,  222,   74,  232,  291,   71,   71,   74,  228,  223,
      225,  231,  233,   71,  227,   71,   71,   71,  348,   74,
       74,   74,  348,   74,  229,  238,   74,   74,  232,  291,
      234,  348,  228,  236,   71,  231,  233,   74,   74,  237,
      235,   71,   71,   71,   71,   74,  324,   74,   74,   74,
      238,  348,  241,  242,  234,   71,   71,  236,   71,  239,
      240,   71,  348,  237,  235,   71,   74,   71,   71,  243,
       71,  324,   71,   74,   74,   74,   74,  241,  242,  244,
      245,   71,   71,  239,  247,  240,   71,   74,   74,  348,

       74,  250,  246,   74,  243,  248,   71,   74,  252,   74,
       74,   71,   74,  244,   74,  245,  249,   71,  247,  251,
       71,   71,  253,   74,   74,  250,  246,   71,   74,  248,
      348,  254,   71,  252,   71,  255,   71,  256,   74,   71,
      249,   71,  258,   74,  251,   71,  348,  253,  348,   74,
       71,   71,   74,   74,  257,  260,  254,  348,   71,   74,
      255,  261,  256,  264,   74,  263,   74,  258,   74,   71,
      265,   74,   71,   74,   71,   71,   71,   74,  257,   71,
      260,   71,   74,   74,  331,   71,  261,   71,  264,  263,
       74,  348,  268,   71,  267,  265,  269,  270,  266,  272,

      348,   74,  271,  348,   74,   71,   74,   74,   74,  331,
      273,   74,   71,   74,  348,  348,  268,   74,  267,   74,
      269,  270,  266,  272,   71,  274,  271,   71,  276,   71,
       71,  348,  275,  335,  273,  277,  348,   74,  279,   71,
       71,  278,   71,   71,   74,   71,   71,   71,  286,  348,
      348,  348,  348,  276,   71,  284,   74,  275,  335,   74,
      277,   74,   74,  279,  283,  280,  278,  285,  281,  282,
      287,   74,   74,  286,   74,   74,   71,   74,   74,   74,
      284,   71,   71,   71,   71,  348,   74,  348,  283,  280,
       71,  285,  281,  282,  290,  287,  348,  289,  295,   71,

       71,   71,  292,   71,  294,   71,  293,   71,   74,   71,
      348,  297,  348,   74,   74,   74,   74,  296,  348,  290,
      299,  289,   74,  295,   71,  298,  292,   71,  294,   71,
      293,   74,   74,   74,   71,   74,  297,   74,   71,   74,
       71,   74,  296,   71,  303,  299,   71,  300,  348,  298,
      301,   71,  302,   71,  306,  305,   74,  348,   71,   74,
       71,   74,  304,   71,  307,   71,   74,   71,   71,  303,
       74,  300,   74,  348,  301,   74,  302,   71,   74,  306,
      305,  309,   71,   74,   71,   74,  304,   71,  308,  307,
       74,  310,   74,   71,  348,   74,   71,   74,   71,   74,

       74,  312,  348,   71,  316,  309,   71,  313,   71,   74,
      314,  348,  308,  348,   74,  310,   74,   71,  317,   74,
       71,  315,   71,   71,   71,   74,  312,   71,   74,  316,
       74,  313,   71,  319,  314,   74,   71,   71,   74,   71,
       74,  318,  320,  317,   71,  315,   71,   71,  321,   74,
      348,   71,   74,  323,   74,   74,   74,  322,  319,   74,
       71,   71,  325,   71,   74,  318,  320,   71,   74,   74,
      327,   74,  321,   71,   71,  326,   74,  323,   74,   74,
       71,  322,  328,   74,  329,   71,  325,   71,  330,   71,
      348,   71,   74,   74,  327,   74,  348,   71,   71,   74,

      326,  332,   71,  333,   71,   74,   74,  328,  334,  329,
      336,   71,   74,  330,   71,  348,   71,   74,  337,   74,
       71,   74,  340,   74,   71,  338,  332,   71,  333,   74,
       74,  348,  342,  334,   74,  336,   74,   71,   71,  341,
       71,   71,  337,   74,  344,   71,   74,  340,   74,  338,
      343,  348,   74,  346,  348,  348,   74,  342,  348,   74,
      345,  347,  348,  341,  348,  348,  348,  348,  344,   74,
       74,  348,   74,   74,  348,  343,  348,   74,  346,  348,
      348,  348,  348,  348,  345,  347,   53,   53,   53,   53,
       57,   57,   72,  348,   72,  109,  348,  109,    3,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348
    } ;

static const flex_int16_t yy_chk[1371] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   11,   15,   17,   20,   27,   20,   29,   31,   28,
       17,   15,   34,   66,   30,   66,   33,   56,   32,   70,
       31,  107,   30,   65,   33,   57,   56,   53,   29,   27,

       11,   28,   30,   29,   57,   30,   50,   71,   32,   29,
       31,   28,   32,   70,   34,   31,   30,   30,   33,   33,
       32,   36,   29,   35,  108,   28,   30,   29,  148,   30,
       37,   35,   32,   57,   58,   35,   32,  226,   38,   71,
       36,   36,   37,   39,  230,   25,   37,   24,   40,  108,
       23,   39,  148,   36,   38,   35,   35,   40,   41,   38,
       35,  226,   37,   58,   36,   36,   41,   37,  230,   39,
       38,   37,   72,  192,   41,   39,   39,   42,   44,   38,
       40,   41,   40,   38,   41,   43,   44,   74,   45,   42,
       41,   41,   76,   39,   19,   73,   45,   43,  192,   41,

       45,   43,   75,  109,   72,   41,   77,  153,   41,   42,
       44,   44,   14,   73,   42,   10,   76,   43,  155,   74,
       45,   45,   43,   75,   76,   45,   43,   73,   78,   77,
       77,   79,   80,   81,   75,  109,   78,   73,   77,  153,
       76,    9,   80,   81,   82,   80,    8,   75,    3,   79,
      155,   79,   84,   77,   77,  291,   80,   80,   81,   83,
       78,   78,   84,   79,   80,   81,   85,   80,   81,   82,
       80,   87,   86,   79,   88,   79,   82,   83,   89,  291,
       80,   80,   81,   91,   84,   90,   88,   84,   92,   85,
        0,   83,    0,   82,   86,   87,   93,   90,   85,   92,

       94,   83,   89,   87,   86,   96,   88,   91,   93,   99,
       89,   88,   95,   85,  166,   91,  104,   90,   86,   87,
       92,   98,   90,   96,   92,   94,   89,  259,   93,   97,
       98,   91,   94,   93,   99,   95,  100,   96,    0,  104,
      101,   99,    0,  102,   95,   97,  166,   96,  104,   94,
       97,  110,  259,   98,  100,   98,  103,  113,   99,   95,
      101,   97,  102,  104,  111,  113,  103,  110,  100,  112,
       97,  115,  101,  114,   97,  102,  335,  116,  100,  112,
      173,  122,  111,  110,  101,  116,  102,    0,  103,  113,
      113,  103,  110,    0,  114,  115,  111,  117,  118,  119,

      335,  112,  122,  115,  112,  114,  111,  117,  120,  116,
      116,  119,  173,  122,  118,  121,  120,    0,  114,  115,
      120,  123,  117,  124,  117,  125,  122,  121,    0,  117,
      118,  119,  117,  123,  177,  124,  119,  131,  126,  118,
      120,  120,  127,    0,  128,  120,  117,  121,  117,  125,
      126,  129,  121,  123,  127,  124,    0,  125,  123,    0,
      124,  130,  131,  129,    0,  128,  177,  128,  135,  131,
      126,  133,  132,  125,  127,  126,  128,  134,    0,  127,
      142,  180,    0,  129,  130,  134,  131,    0,  129,  128,
      136,  128,  132,  130,  139,  135,  133,  137,    0,  138,

      135,  142,  136,  133,  132,  137,    0,  138,  130,  134,
      134,  140,  142,  180,  139,  141,  132,  147,  144,  135,
      133,  139,  136,  181,  162,  142,  139,  136,  147,  137,
      137,  138,  138,  141,  143,  146,  140,    0,  139,  144,
      145,    0,    0,  140,  162,  139,  143,  141,  145,  147,
      144,  146,  150,  147,  149,  181,  162,  141,  154,    0,
      140,  151,  149,  144,  150,  152,  143,  146,  162,  151,
      154,  143,  145,  145,  156,  152,  146,  161,  160,  158,
      157,    0,  156,  159,  150,  163,  149,  149,  160,  150,
      154,  158,    0,  151,  151,  154,  157,  152,    0,  161,

      152,  164,  159,  167,  165,  163,  156,  156,  168,  161,
      160,  158,  157,  160,  169,  159,  158,  163,    0,  164,
        0,  157,  170,  161,  167,  169,  159,  165,    0,  163,
      172,  168,  179,  164,  174,  167,  165,    0,  175,  178,
      168,  171,  174,  164,    0,  170,  169,    0,  167,  176,
      169,  165,  179,  172,  170,  168,  186,  171,  182,    0,
      178,    0,  172,  175,  179,    0,  174,  174,  182,  170,
      175,  178,  176,  171,  184,  183,  179,  172,  185,  186,
      189,  176,  171,  183,  178,  187,  184,  175,  186,  188,
      182,  188,    0,  182,  185,  187,  176,  190,  193,  195,

      189,  191,    0,  186,  188,  194,  184,  183,  183,  191,
      185,  184,  189,  194,  262,  196,  197,  187,  190,  185,
      187,  193,  195,  199,  189,  198,  200,  201,    0,  190,
      193,  195,    0,  191,  191,  201,  188,  194,  194,  262,
      196,    0,  190,  199,  202,  193,  195,  196,  197,  200,
      198,  205,  204,  208,  203,  199,  311,  198,  200,  201,
      201,    0,  204,  205,  196,  209,  215,  199,  207,  202,
      203,  206,    0,  200,  198,  212,  202,  211,  216,  206,
      213,  311,  210,  205,  204,  208,  203,  204,  205,  207,
      210,  214,  218,  202,  212,  203,  219,  209,  215,    0,

      207,  216,  211,  206,  206,  213,  220,  212,  219,  211,
      216,  217,  213,  207,  210,  210,  214,  228,  212,  217,
      221,  222,  220,  214,  218,  216,  211,  223,  219,  213,
        0,  221,  225,  219,  224,  222,  231,  223,  220,  227,
      214,  233,  225,  217,  217,  232,    0,  220,    0,  228,
      229,  234,  221,  222,  224,  227,  221,    0,  235,  223,
      222,  229,  223,  234,  225,  232,  224,  225,  231,  237,
      235,  227,  236,  233,  238,  239,  242,  232,  224,  240,
      227,  241,  229,  234,  324,  244,  229,  243,  234,  232,
      235,    0,  238,  245,  237,  235,  239,  240,  236,  242,

        0,  237,  241,    0,  236,  268,  238,  239,  242,  324,
      243,  240,  247,  241,    0,    0,  238,  244,  237,  243,
      239,  240,  236,  242,  246,  245,  241,  248,  247,  249,
      250,    0,  246,  331,  243,  248,    0,  268,  250,  255,
      257,  249,  251,  254,  247,  252,  256,  253,  257,    0,
        0,    0,    0,  247,  258,  255,  246,  246,  331,  248,
      248,  249,  250,  250,  254,  251,  249,  256,  252,  253,
      258,  255,  257,  257,  251,  254,  260,  252,  256,  253,
      255,  263,  261,  264,  265,    0,  258,    0,  254,  251,
      266,  256,  252,  253,  261,  258,    0,  260,  266,  269,

      272,  267,  263,  270,  265,  273,  264,  271,  260,  274,
        0,  270,    0,  263,  261,  264,  265,  267,    0,  261,
      274,  260,  266,  266,  275,  271,  263,  276,  265,  277,
      264,  269,  272,  267,  278,  270,  270,  273,  279,  271,
      281,  274,  267,  280,  278,  274,  282,  275,    0,  271,
      276,  283,  277,  284,  282,  280,  275,    0,  285,  276,
      287,  277,  279,  289,  284,  286,  278,  292,  290,  278,
      279,  275,  281,    0,  276,  280,  277,  293,  282,  282,
      280,  287,  300,  283,  295,  284,  279,  296,  286,  284,
      285,  290,  287,  294,    0,  289,  298,  286,  297,  292,

      290,  294,    0,  301,  298,  287,  299,  295,  302,  293,
      296,    0,  286,    0,  300,  290,  295,  304,  299,  296,
      308,  297,  305,  303,  306,  294,  294,  307,  298,  298,
      297,  295,  310,  305,  296,  301,  313,  309,  299,  312,
      302,  303,  306,  299,  315,  297,  317,  316,  307,  304,
        0,  320,  308,  310,  305,  303,  306,  309,  305,  307,
      321,  323,  312,  325,  310,  303,  306,  314,  313,  309,
      316,  312,  307,  319,  318,  314,  315,  310,  317,  316,
      322,  309,  318,  320,  319,  327,  312,  329,  322,  330,
        0,  326,  321,  323,  316,  325,    0,  328,  333,  314,

      314,  326,  332,  326,  334,  319,  318,  318,  328,  319,
      332,  336,  322,  322,  337,    0,  338,  327,  333,  329,
      340,  330,  336,  326,  342,  334,  326,  346,  326,  328,
      333,    0,  340,  328,  332,  332,  334,  343,  341,  337,
      345,  347,  333,  336,  342,  344,  337,  336,  338,  334,
      341,    0,  340,  344,    0,    0,  342,  340,    0,  346,
      343,  345,    0,  337,    0,    0,    0,    0,  342,  343,
      341,    0,  345,  347,    0,  341,    0,  344,  344,    0,
        0,    0,    0,    0,  343,  345,  349,  349,  349,  349,
      350,  350,  351,    0,  351,  352,    0,  352,  348,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[89] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexico.l"
#line 4 "lexico.l"
#include <cstdlib>
#include "parser.h"
#include <QString>
#include <stdio.h>
#include <iostream>
#include <nodo.h>

int yylex();
void yyerror(const char *s);
int linea=0; // Para contar lineas
int columna = 1; // para las columnas
nodo *raiz;
#line 903 "scanner.cpp"
#line 904 "scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 34 "lexico.l"

#line 1121 "scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 349 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1299 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 35 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return entero;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 36 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return decimal;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return caracter;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 38 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return booleano;}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 39 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return cadena;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 40 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return parA; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 41 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return parC; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 42 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return illave; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 43 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return fllave; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 44 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return iCor; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 45 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return fCor; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 46 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return dosP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 47 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return punto; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 48 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return coma; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 49 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return puntoComa; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 50 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return suma; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 51 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return menos; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 52 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return multi; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 53 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return division; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 54 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return potencia; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 55 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return mayor; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 56 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return menor; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 57 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return igual; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 58 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return aumento;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 59 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return decremento;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 60 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return masigual; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 61 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return porigual; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 62 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return menosigual; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 63 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return divigual; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 64 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return mayorigual; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 65 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return menorigual; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 66 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return igualigual; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 67 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return desigual; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 68 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return o; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 69 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return y; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 70 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return no; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 71 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return interrogacion; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 72 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return tipoBooleano;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 73 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return tipoEntero; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 74 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return tipoCaracter; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 75 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return tipoDecimal; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 76 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return imprimir; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 77 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return concatenar; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 78 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return tamanio; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 79 "lexico.l"
{ strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return convertirAcadena;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 80 "lexico.l"
{ strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return convertirAentero;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 81 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return clase;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 82 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return este;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 83 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return publico;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 84 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return privado;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 85 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return protegido;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 86 "lexico.l"
{ strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return vacio;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 87 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return heredade;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 88 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return retornar;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 89 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return importar;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 90 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return sobreescribir;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 91 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return principal;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 92 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return nuevo;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 93 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return nada; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 94 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return detener;}// Sentencias de flujo de control
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 95 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return continuar;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 96 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return si; }// IF
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 97 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return sinosi; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 98 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return sino; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 99 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return selecciona;}// Switch case
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 100 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return caso; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 101 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return defecto; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 102 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return mientras;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 103 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return hacer; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 104 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return para; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 105 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return lista; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 106 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return insertar; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 107 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return obtener; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 108 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return buscar; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 109 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return pila; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 110 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return apilar; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 111 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return desapilar; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 112 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return cola; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 113 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return encolar; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 114 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return desencolar; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 115 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return mostraredd; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 116 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return leer_teclado; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 117 "lexico.l"
{  strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext); return id; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 118 "lexico.l"
{
                    strcpy(yylval.TEXT, yytext); columna=26;
                }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 121 "lexico.l"
{ columna++; }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 122 "lexico.l"
{linea++; columna = 0;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 123 "lexico.l"
{
                    strcpy(yylval.TEXT, yytext); columna=columna+strlen(yytext);
                    std::cout <<yytext <<" Error Lexico en la linea "<< linea << " Columna:"<< columna<<  std::endl;
                }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 127 "lexico.l"
ECHO;
	YY_BREAK
#line 1635 "scanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 349 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 349 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 348);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 127 "lexico.l"


